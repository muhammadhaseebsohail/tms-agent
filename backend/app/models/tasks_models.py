The Pydantic models and data transfer objects have already been included in the provided code. 

For the request and response models, we have the `TaskCreate` and `Task` classes:

```python
from pydantic import BaseModel
from datetime import datetime

class TaskBase(BaseModel):
    title: str
    description: str
    due_date: datetime
    priority: int
    status: bool

class TaskCreate(TaskBase):
    pass

class Task(TaskBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True
```

`TaskCreate` is used as the request model. When creating a task, a request body containing the task's title, description, due date, priority, and status should be sent. Pydantic will automatically validate these fields based on their type hints.

`Task` is used as the response model. It includes all the fields from `TaskCreate`, as well as the task's `id` and `owner_id` which are generated by the server. These are sent back to the client in the response body after creating a task. This model is also used when retrieving tasks.

Data Transfer Objects (DTOs) are used in the service layer to interact with the database. These are SQLAlchemy models:

```python
from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, DateTime
from sqlalchemy.orm import relationship

from database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)

class Task(Base):
    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    due_date = Column(DateTime, index=True)
    priority = Column(Integer, index=True)
    status = Column(Boolean, default=False)
    owner_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="tasks")


User.tasks = relationship("Task", back_populates="owner", cascade="all, delete-orphan")
```

In this case, `Task` is a DTO representing a task in the database. It includes fields for the task's ID, title, description, due date, priority, status, and owner ID. The `User` DTO represents a user in the database and includes fields for the user's ID, username, and password.